-- This tests file includes tests for local execution of utility commands.
-- For now, we this file includes tests only for local execution of
-- `TRUNCATE/DROP/DDL` commands for all kinds of distributed tables FROM
-- the coordinator node having regular distributed tables' shards
-- (shouldHaveShards = on) and having reference table placements in it.
-- Regression tests for MX will be put into
-- local_shard_utility_command_execution_mx.sql file.
RESET log_min_messages;
RESET client_min_messages;
SET citus.shard_replication_factor TO 1;
SET citus.log_remote_commands TO OFF;
SET citus.log_local_commands TO ON;
CREATE SCHEMA local_commands_test_schema;
SET search_path TO local_commands_test_schema;
SET citus.shard_COUNT TO 32;
-- let coordinator have distributed table shards/placements
SELECT master_add_node('localhost', :master_port, groupId => 0);
NOTICE:  Replicating reference table "customer_mx" to the node localhost:xxxxx
NOTICE:  Replicating reference table "nation_mx" to the node localhost:xxxxx
NOTICE:  Replicating reference table "part_mx" to the node localhost:xxxxx
NOTICE:  Replicating reference table "supplier_mx" to the node localhost:xxxxx
 master_add_node
---------------------------------------------------------------------
              32
(1 row)

SELECT master_set_node_property('localhost', :master_port, 'shouldhaveshards', true);
 master_set_node_property
---------------------------------------------------------------------

(1 row)

---------------------------------------------------------------------
------ local execution of TRUNCATE ------
---------------------------------------------------------------------
CREATE TABLE ref_table (a int primary key);
SELECT create_reference_table('ref_table');
 create_reference_table
---------------------------------------------------------------------

(1 row)

CREATE TABLE dist_table(a int);
SELECT create_distributed_table('dist_table', 'a');
 create_distributed_table
---------------------------------------------------------------------

(1 row)

ALTER TABLE dist_table ADD CONSTRAINT fkey FOREIGN KEY(a) REFERENCES ref_table(a);
-- insert some data
INSERT INTO ref_table VALUES(1);
NOTICE:  executing the command locally: INSERT INTO local_commands_test_schema.ref_table_1250015 (a) VALUES (1)
INSERT INTO dist_table VALUES(1);
-- Currently, we support local execution of TRUNCATE commands for all kinds
-- of distributed tables except the APPCOMMIT tables. Hence, cascading to
-- distributed tables wouldn't be a problem even in the case that coordinator
-- have some local distributed table shards as we continue with local execution
-- since we locally truncated ref_table's shards
TRUNCATE ref_table CASCADE;
NOTICE:  truncate cascades to table "dist_table"
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.ref_table_1250015 CASCADE
NOTICE:  truncate cascades to table "dist_table_1250016"
NOTICE:  truncate cascades to table "dist_table_1250019"
NOTICE:  truncate cascades to table "dist_table_1250022"
NOTICE:  truncate cascades to table "dist_table_1250025"
NOTICE:  truncate cascades to table "dist_table_1250028"
NOTICE:  truncate cascades to table "dist_table_1250031"
NOTICE:  truncate cascades to table "dist_table_1250034"
NOTICE:  truncate cascades to table "dist_table_1250037"
NOTICE:  truncate cascades to table "dist_table_1250040"
NOTICE:  truncate cascades to table "dist_table_1250043"
NOTICE:  truncate cascades to table "dist_table_1250046"
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250016 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250019 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250022 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250025 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250028 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250031 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250034 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250037 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250040 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250043 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250046 CASCADE
-- show that TRUNCATE is successfull
SELECT COUNT(*) FROM ref_table, dist_table;
 count
---------------------------------------------------------------------
     0
(1 row)

-- insert some data
INSERT INTO ref_table VALUES(1);
NOTICE:  executing the command locally: INSERT INTO local_commands_test_schema.ref_table_1250015 (a) VALUES (1)
INSERT INTO dist_table VALUES(1);
-- As SELECT accesses local placements of reference table, TRUNCATE would also be
-- forced to local execution even if they operate on different tables.
BEGIN;
  SELECT COUNT(*) FROM ref_table;
NOTICE:  executing the command locally: SELECT count(*) AS count FROM local_commands_test_schema.ref_table_1250015 ref_table
 count
---------------------------------------------------------------------
     1
(1 row)

  TRUNCATE dist_table;
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250016 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250019 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250022 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250025 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250028 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250031 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250034 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250037 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250040 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250043 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250046 CASCADE
COMMIT;
-- show that TRUNCATE is successfull
SELECT COUNT(*) FROM dist_table;
 count
---------------------------------------------------------------------
     0
(1 row)

-- insert some data
INSERT INTO ref_table VALUES(2);
NOTICE:  executing the command locally: INSERT INTO local_commands_test_schema.ref_table_1250015 (a) VALUES (2)
INSERT INTO dist_table VALUES(2);
NOTICE:  executing the command locally: INSERT INTO local_commands_test_schema.dist_table_1250040 (a) VALUES (2)
-- However, SELECT would access local placements via remote connections for regular
-- distributed tables, TRUNCATE would also be executed remotely.
BEGIN;
  SELECT COUNT(*) FROM dist_table;
 count
---------------------------------------------------------------------
     1
(1 row)

  TRUNCATE dist_table;
COMMIT;
-- show that TRUNCATE is successfull
SELECT COUNT(*) FROM dist_table;
 count
---------------------------------------------------------------------
     0
(1 row)

-- insert some data
INSERT INTO ref_table VALUES(3);
NOTICE:  executing the command locally: INSERT INTO local_commands_test_schema.ref_table_1250015 (a) VALUES (3)
INSERT INTO dist_table VALUES(3);
NOTICE:  executing the command locally: INSERT INTO local_commands_test_schema.dist_table_1250031 (a) VALUES (3)
-- TRUNCATE on dist_table (note that: again no cascade here) would
-- just be handled via remote executions even on its local shards
TRUNCATE dist_table;
-- show that TRUNCATE is successfull
SELECT COUNT(*) FROM dist_table;
 count
---------------------------------------------------------------------
     0
(1 row)

-- insert some data
INSERT INTO ref_table VALUES(4);
NOTICE:  executing the command locally: INSERT INTO local_commands_test_schema.ref_table_1250015 (a) VALUES (4)
-- However, creating a dist. table is handled by remote connections.
-- Hence, the commands following it (INSERT & TRUNCATE) would also be
-- handled remotely.
BEGIN;
  CREATE TABLE ref_table_1(a int);
  SELECT create_reference_table('ref_table_1');
 create_reference_table
---------------------------------------------------------------------

(1 row)

  -- insert some data
  INSERT INTO ref_table_1 VALUES(5);
  TRUNCATE ref_table_1;
COMMIT;
-- show that TRUNCATE is successfull
SELECT COUNT(*) FROM ref_table_1;
NOTICE:  executing the command locally: SELECT count(*) AS count FROM local_commands_test_schema.ref_table_1_1250048 ref_table_1
 count
---------------------------------------------------------------------
     0
(1 row)

-- However, as SELECT would access local placements via remote parallel
-- connections for regular distributed tables, below TRUNCATE would error
-- out
BEGIN;
  SELECT COUNT(*) FROM dist_table;
 count
---------------------------------------------------------------------
     0
(1 row)

  TRUNCATE ref_table CASCADE;
NOTICE:  truncate cascades to table "dist_table"
ERROR:  cannot execute DDL on reference table "ref_table" because there was a parallel SELECT access to distributed table "dist_table" in the same transaction
HINT:  Try re-running the transaction with "SET LOCAL citus.multi_shard_modify_mode TO 'sequential';"
COMMIT;
-- insert some data
INSERT INTO ref_table VALUES(7);
NOTICE:  executing the command locally: INSERT INTO local_commands_test_schema.ref_table_1250015 (a) VALUES (7)
INSERT INTO dist_table VALUES(7);
-- we can TRUNCATE those two tables within the same command
TRUNCATE ref_table, dist_table;
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.ref_table_1250015 CASCADE
NOTICE:  truncate cascades to table "dist_table_1250016"
NOTICE:  truncate cascades to table "dist_table_1250019"
NOTICE:  truncate cascades to table "dist_table_1250022"
NOTICE:  truncate cascades to table "dist_table_1250025"
NOTICE:  truncate cascades to table "dist_table_1250028"
NOTICE:  truncate cascades to table "dist_table_1250031"
NOTICE:  truncate cascades to table "dist_table_1250034"
NOTICE:  truncate cascades to table "dist_table_1250037"
NOTICE:  truncate cascades to table "dist_table_1250040"
NOTICE:  truncate cascades to table "dist_table_1250043"
NOTICE:  truncate cascades to table "dist_table_1250046"
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250016 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250019 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250022 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250025 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250028 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250031 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250034 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250037 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250040 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250043 CASCADE
NOTICE:  executing the command locally: TRUNCATE TABLE local_commands_test_schema.dist_table_1250046 CASCADE
-- show that TRUNCATE is successfull
SELECT COUNT(*) FROM ref_table, dist_table;
 count
---------------------------------------------------------------------
     0
(1 row)

---------------------------------------------------------------------
------ local execution of DROP ------
---------------------------------------------------------------------
-- droping just the referenced table would error out as dist_table references it
DROP TABLE ref_table;
ERROR:  cannot drop table ref_table because other objects depend on it
DETAIL:  constraint fkey on table dist_table depends on table ref_table
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
-- drop those two tables locally
-- observe triggered master_drop_all_shards calls are also executed locally
DROP TABLE ref_table, dist_table;
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250016 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250019 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250022 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250025 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250028 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250031 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250034 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250037 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250040 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250043 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250046 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.ref_table_1250015 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
-- drop the other standalone table locally as well
DROP TABLE ref_table_1;
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.ref_table_1_1250048 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
-- show that DROP commands are successfull
SELECT tablename FROM pg_tables where schemaname='local_commands_test_schema' ORDER BY tablename;
 tablename
---------------------------------------------------------------------
(0 rows)

CREATE TABLE ref_table (a int primary key);
SELECT create_reference_table('ref_table');
 create_reference_table
---------------------------------------------------------------------

(1 row)

-- We execute SELECT command within the below block locally.
-- Hence we should execute the DROP command locally as well.
BEGIN;
  SELECT COUNT(*) FROM ref_table;
NOTICE:  executing the command locally: SELECT count(*) AS count FROM local_commands_test_schema.ref_table_1250049 ref_table
 count
---------------------------------------------------------------------
     0
(1 row)

  DROP TABLE ref_table;
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.ref_table_1250049 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
COMMIT;
CREATE TABLE ref_table (a int primary key);
SELECT create_reference_table('ref_table');
 create_reference_table
---------------------------------------------------------------------

(1 row)

CREATE TABLE dist_table(a int);
SELECT create_distributed_table('dist_table', 'a');
 create_distributed_table
---------------------------------------------------------------------

(1 row)

ALTER TABLE dist_table ADD CONSTRAINT fkey FOREIGN KEY(a) REFERENCES ref_table(a);
-- As both commands are executed locally, TRUNCATE would be aware of dist_table
-- is dropped. Hence, below block should not be effective as TRUNCATE will error
-- out.
BEGIN;
  DROP TABLE dist_table CASCADE;
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250051 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250054 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250057 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250060 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250063 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250066 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250069 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250072 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250075 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250078 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250081 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
  TRUNCATE dist_table;
ERROR:  relation "dist_table" does not exist
COMMIT;
-- show that DROP command is rollback'd successfully (should print 1)
SELECT 1 FROM pg_tables where tablename='dist_table';
 ?column?
---------------------------------------------------------------------
        1
(1 row)

-- As SELECT will be executed remotely, the DROP command should also be executed
-- remotely to prevent possible self-deadlocks & inconsistencies
-- FIXME: we have a known bug for below case described in
-- https://github.com/citusdata/citus/issues/3526. Hence, commented out as it could
-- randomly fall into distributed deadlocks
--BEGIN;
--  SELECT COUNT(*) FROM dist_table;
--  DROP TABLE dist_table;
--END;
-- As SELECT will be executed remotely, the DROP command below should also be
-- executed remotely.
CREATE TABLE another_dist_table(a int);
SELECT create_distributed_table('another_dist_table', 'a');
 create_distributed_table
---------------------------------------------------------------------

(1 row)

BEGIN;
  SELECT COUNT(*) FROM another_dist_table;
 count
---------------------------------------------------------------------
     0
(1 row)

  DROP TABLE another_dist_table;
COMMIT;
-- show that DROP command is committed successfully
SELECT 1 FROM pg_tables where tablename='another_dist_table';
 ?column?
---------------------------------------------------------------------
(0 rows)

-- As DROP tasks are processed one-by-one (both in remote execution a& local execution),
-- we execute DROP commands locally if current transaction is not connected to local
-- node already. Hence, below DROP will also be executed locally.
DROP TABLE dist_table;
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250051 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250054 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250057 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250060 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250063 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250066 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250069 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250072 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250075 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250078 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250081 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
-- show that DROP command is successfull
SELECT 1 FROM pg_tables where tablename='dist_table';
 ?column?
---------------------------------------------------------------------
(0 rows)

CREATE TABLE dist_table(a int);
SELECT create_distributed_table('dist_table', 'a');
 create_distributed_table
---------------------------------------------------------------------

(1 row)

ALTER TABLE dist_table ADD CONSTRAINT fkey FOREIGN KEY(a) REFERENCES ref_table(a);
-- as SELECT on ref_table will be executed locally, the SELECT and DROP following
-- it would also be executed locally
BEGIN;
  SELECT COUNT(*) FROM ref_table;
NOTICE:  executing the command locally: SELECT count(*) AS count FROM local_commands_test_schema.ref_table_1250050 ref_table
 count
---------------------------------------------------------------------
     0
(1 row)

  DROP TABLE dist_table CASCADE;
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250115 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250118 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250121 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250124 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250127 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250130 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250133 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250136 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250139 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250142 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250145 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
ROLLBACK;
-- show that DROP command is rollback'd successfully (should print 1)
SELECT 1 FROM pg_tables where tablename='dist_table';
 ?column?
---------------------------------------------------------------------
        1
(1 row)

---------------------------------------------------------------------
------ local execution of DDL commands ------
---------------------------------------------------------------------
-- try some complicated CASCADE cases along with DDL commands
CREATE TABLE ref_table_1(a int primary key);
SELECT create_reference_table('ref_table_1');
 create_reference_table
---------------------------------------------------------------------

(1 row)

-- below block should execute successfully
BEGIN;
  SELECT COUNT(*) FROM ref_table;
NOTICE:  executing the command locally: SELECT count(*) AS count FROM local_commands_test_schema.ref_table_1250050 ref_table
 count
---------------------------------------------------------------------
     0
(1 row)

  -- as SELECT above runs locally and as now we support local execution of DDL commands,
  -- below DDL should be able to define foreign key constraint successfully
  ALTER TABLE ref_table ADD CONSTRAINT fkey FOREIGN KEY(a) REFERENCES ref_table_1(a);
NOTICE:  executing the command locally: SELECT worker_apply_inter_shard_ddl_command (1250050, 'local_commands_test_schema', 1250147, 'local_commands_test_schema', 'ALTER TABLE ref_table ADD CONSTRAINT fkey FOREIGN KEY(a) REFERENCES ref_table_1(a);')
  -- insert some data
  INSERT INTO ref_table_1 VALUES (1);
NOTICE:  executing the command locally: INSERT INTO local_commands_test_schema.ref_table_1_1250147 (a) VALUES (1)
  INSERT INTO ref_table_1 VALUES (2);
NOTICE:  executing the command locally: INSERT INTO local_commands_test_schema.ref_table_1_1250147 (a) VALUES (2)
  INSERT INTO ref_table VALUES (1);
NOTICE:  executing the command locally: INSERT INTO local_commands_test_schema.ref_table_1250050 (a) VALUES (1)
  -- chain foreign key constraints
  -- local execution should be observed here as well
  ALTER TABLE dist_table ADD CONSTRAINT fkey1 FOREIGN KEY(a) REFERENCES ref_table(a);
NOTICE:  executing the command locally: SELECT worker_apply_inter_shard_ddl_command (1250115, 'local_commands_test_schema', 1250050, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD CONSTRAINT fkey1 FOREIGN KEY(a) REFERENCES ref_table(a);')
NOTICE:  executing the command locally: SELECT worker_apply_inter_shard_ddl_command (1250118, 'local_commands_test_schema', 1250050, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD CONSTRAINT fkey1 FOREIGN KEY(a) REFERENCES ref_table(a);')
NOTICE:  executing the command locally: SELECT worker_apply_inter_shard_ddl_command (1250121, 'local_commands_test_schema', 1250050, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD CONSTRAINT fkey1 FOREIGN KEY(a) REFERENCES ref_table(a);')
NOTICE:  executing the command locally: SELECT worker_apply_inter_shard_ddl_command (1250124, 'local_commands_test_schema', 1250050, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD CONSTRAINT fkey1 FOREIGN KEY(a) REFERENCES ref_table(a);')
NOTICE:  executing the command locally: SELECT worker_apply_inter_shard_ddl_command (1250127, 'local_commands_test_schema', 1250050, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD CONSTRAINT fkey1 FOREIGN KEY(a) REFERENCES ref_table(a);')
NOTICE:  executing the command locally: SELECT worker_apply_inter_shard_ddl_command (1250130, 'local_commands_test_schema', 1250050, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD CONSTRAINT fkey1 FOREIGN KEY(a) REFERENCES ref_table(a);')
NOTICE:  executing the command locally: SELECT worker_apply_inter_shard_ddl_command (1250133, 'local_commands_test_schema', 1250050, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD CONSTRAINT fkey1 FOREIGN KEY(a) REFERENCES ref_table(a);')
NOTICE:  executing the command locally: SELECT worker_apply_inter_shard_ddl_command (1250136, 'local_commands_test_schema', 1250050, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD CONSTRAINT fkey1 FOREIGN KEY(a) REFERENCES ref_table(a);')
NOTICE:  executing the command locally: SELECT worker_apply_inter_shard_ddl_command (1250139, 'local_commands_test_schema', 1250050, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD CONSTRAINT fkey1 FOREIGN KEY(a) REFERENCES ref_table(a);')
NOTICE:  executing the command locally: SELECT worker_apply_inter_shard_ddl_command (1250142, 'local_commands_test_schema', 1250050, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD CONSTRAINT fkey1 FOREIGN KEY(a) REFERENCES ref_table(a);')
NOTICE:  executing the command locally: SELECT worker_apply_inter_shard_ddl_command (1250145, 'local_commands_test_schema', 1250050, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD CONSTRAINT fkey1 FOREIGN KEY(a) REFERENCES ref_table(a);')
  INSERT INTO dist_table VALUES (1);
  DELETE FROM ref_table_1 WHERE a=2;
NOTICE:  executing the command locally: DELETE FROM local_commands_test_schema.ref_table_1_1250147 ref_table_1 WHERE (a OPERATOR(pg_catalog.=) 2)
  -- add another column to dist_table
  -- note that we execute below DDL locally as well
  ALTER TABLE ref_table ADD b int;
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250050, 'local_commands_test_schema', 'ALTER TABLE ref_table ADD b int;')
  -- define self reference
  ALTER TABLE ref_table ADD CONSTRAINT fkey2 FOREIGN KEY(b) REFERENCES ref_table(a);
NOTICE:  executing the command locally: SELECT worker_apply_inter_shard_ddl_command (1250050, 'local_commands_test_schema', 1250050, 'local_commands_test_schema', 'ALTER TABLE ref_table ADD CONSTRAINT fkey2 FOREIGN KEY(b) REFERENCES ref_table(a);')
  SELECT COUNT(*) FROM ref_table_1, ref_table, dist_table;
NOTICE:  executing the command locally: SELECT count(*) AS count FROM ((local_commands_test_schema.dist_table_1250115 dist_table JOIN local_commands_test_schema.ref_table_1_1250147 ref_table_1 ON (true)) JOIN local_commands_test_schema.ref_table_1250050 ref_table ON (true)) WHERE true
NOTICE:  executing the command locally: SELECT count(*) AS count FROM ((local_commands_test_schema.dist_table_1250118 dist_table JOIN local_commands_test_schema.ref_table_1_1250147 ref_table_1 ON (true)) JOIN local_commands_test_schema.ref_table_1250050 ref_table ON (true)) WHERE true
NOTICE:  executing the command locally: SELECT count(*) AS count FROM ((local_commands_test_schema.dist_table_1250121 dist_table JOIN local_commands_test_schema.ref_table_1_1250147 ref_table_1 ON (true)) JOIN local_commands_test_schema.ref_table_1250050 ref_table ON (true)) WHERE true
NOTICE:  executing the command locally: SELECT count(*) AS count FROM ((local_commands_test_schema.dist_table_1250124 dist_table JOIN local_commands_test_schema.ref_table_1_1250147 ref_table_1 ON (true)) JOIN local_commands_test_schema.ref_table_1250050 ref_table ON (true)) WHERE true
NOTICE:  executing the command locally: SELECT count(*) AS count FROM ((local_commands_test_schema.dist_table_1250127 dist_table JOIN local_commands_test_schema.ref_table_1_1250147 ref_table_1 ON (true)) JOIN local_commands_test_schema.ref_table_1250050 ref_table ON (true)) WHERE true
NOTICE:  executing the command locally: SELECT count(*) AS count FROM ((local_commands_test_schema.dist_table_1250130 dist_table JOIN local_commands_test_schema.ref_table_1_1250147 ref_table_1 ON (true)) JOIN local_commands_test_schema.ref_table_1250050 ref_table ON (true)) WHERE true
NOTICE:  executing the command locally: SELECT count(*) AS count FROM ((local_commands_test_schema.dist_table_1250133 dist_table JOIN local_commands_test_schema.ref_table_1_1250147 ref_table_1 ON (true)) JOIN local_commands_test_schema.ref_table_1250050 ref_table ON (true)) WHERE true
NOTICE:  executing the command locally: SELECT count(*) AS count FROM ((local_commands_test_schema.dist_table_1250136 dist_table JOIN local_commands_test_schema.ref_table_1_1250147 ref_table_1 ON (true)) JOIN local_commands_test_schema.ref_table_1250050 ref_table ON (true)) WHERE true
NOTICE:  executing the command locally: SELECT count(*) AS count FROM ((local_commands_test_schema.dist_table_1250139 dist_table JOIN local_commands_test_schema.ref_table_1_1250147 ref_table_1 ON (true)) JOIN local_commands_test_schema.ref_table_1250050 ref_table ON (true)) WHERE true
NOTICE:  executing the command locally: SELECT count(*) AS count FROM ((local_commands_test_schema.dist_table_1250142 dist_table JOIN local_commands_test_schema.ref_table_1_1250147 ref_table_1 ON (true)) JOIN local_commands_test_schema.ref_table_1250050 ref_table ON (true)) WHERE true
NOTICE:  executing the command locally: SELECT count(*) AS count FROM ((local_commands_test_schema.dist_table_1250145 dist_table JOIN local_commands_test_schema.ref_table_1_1250147 ref_table_1 ON (true)) JOIN local_commands_test_schema.ref_table_1250050 ref_table ON (true)) WHERE true
 count
---------------------------------------------------------------------
     1
(1 row)

  -- observe DROP on a self-referencing table also works
  DROP TABLE ref_table_1, ref_table, dist_table;
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250115 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250118 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250121 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250124 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250127 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250130 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250133 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250136 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250139 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250142 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.dist_table_1250145 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.ref_table_1250050 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
NOTICE:  executing the command locally: DROP TABLE IF EXISTS local_commands_test_schema.ref_table_1_1250147 CASCADE
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 19 at PERFORM
  -- show that DROP command is successfull
  SELECT tablename FROM pg_tables where schemaname='local_commands_test_schema' ORDER BY tablename;
 tablename
---------------------------------------------------------------------
(0 rows)

ROLLBACK;
-- add another column to dist_table (should be executed remotely)
ALTER TABLE dist_table ADD b int;
CREATE SCHEMA foo_schema;
-- As SELECT will be executed remotely, ALTER TABLE SET SCHEMA command should alse be executed remotely
BEGIN;
  SELECT COUNT(*) FROM dist_table;
 count
---------------------------------------------------------------------
     0
(1 row)

  ALTER TABLE dist_table SET SCHEMA foo_schema;
  -- show that ALTER TABLE SET SCHEMA is successfull
  SELECT tablename FROM pg_tables where schemaname='foo_schema' ORDER BY tablename;
 tablename
---------------------------------------------------------------------
 dist_table
(1 row)

ROLLBACK;
-- However, below ALTER TABLE SET SCHEMA command will be executed locally
BEGIN;
  ALTER TABLE ref_table SET SCHEMA foo_schema;
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250050, 'local_commands_test_schema', 'ALTER TABLE local_commands_test_schema.ref_table SET SCHEMA foo_schema;')
  -- show that ALTER TABLE SET SCHEMA is successfull
  SELECT tablename FROM pg_tables where schemaname='foo_schema' ORDER BY tablename;
     tablename
---------------------------------------------------------------------
 ref_table
 ref_table_1250050
(2 rows)

ROLLBACK;
-- Try a bunch of commands and expect failure at SELECT create_distributed_table
BEGIN;
  -- here this SELECT will enforce the whole block for local execution
  SELECT COUNT(*) FROM ref_table;
NOTICE:  executing the command locally: SELECT count(*) AS count FROM local_commands_test_schema.ref_table_1250050 ref_table
 count
---------------------------------------------------------------------
     0
(1 row)

  -- execute bunch of DDL & DROP commands succesfully
  ALTER TABLE dist_table ADD column c int;
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250115, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD column c int;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250118, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD column c int;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250121, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD column c int;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250124, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD column c int;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250127, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD column c int;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250130, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD column c int;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250133, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD column c int;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250136, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD column c int;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250139, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD column c int;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250142, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD column c int;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250145, 'local_commands_test_schema', 'ALTER TABLE dist_table ADD column c int;')
  ALTER TABLE dist_table ALTER COLUMN c SET NOT NULL;
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250115, 'local_commands_test_schema', 'ALTER TABLE dist_table ALTER COLUMN c SET NOT NULL;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250118, 'local_commands_test_schema', 'ALTER TABLE dist_table ALTER COLUMN c SET NOT NULL;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250121, 'local_commands_test_schema', 'ALTER TABLE dist_table ALTER COLUMN c SET NOT NULL;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250124, 'local_commands_test_schema', 'ALTER TABLE dist_table ALTER COLUMN c SET NOT NULL;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250127, 'local_commands_test_schema', 'ALTER TABLE dist_table ALTER COLUMN c SET NOT NULL;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250130, 'local_commands_test_schema', 'ALTER TABLE dist_table ALTER COLUMN c SET NOT NULL;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250133, 'local_commands_test_schema', 'ALTER TABLE dist_table ALTER COLUMN c SET NOT NULL;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250136, 'local_commands_test_schema', 'ALTER TABLE dist_table ALTER COLUMN c SET NOT NULL;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250139, 'local_commands_test_schema', 'ALTER TABLE dist_table ALTER COLUMN c SET NOT NULL;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250142, 'local_commands_test_schema', 'ALTER TABLE dist_table ALTER COLUMN c SET NOT NULL;')
NOTICE:  executing the command locally: SELECT worker_apply_shard_ddl_command (1250145, 'local_commands_test_schema', 'ALTER TABLE dist_table ALTER COLUMN c SET NOT NULL;')
  -- as we create table via remote connections, below SELECT create_distributed_table
  -- would error out
  CREATE TABLE another_dist_table(a int);
  SELECT create_distributed_table('another_dist_table', 'a');
ERROR:  cannot execute command because a local execution has accessed a placement in the transaction
DETAIL:  Some parallel commands cannot be executed if a previous command has already been executed locally
HINT:  Try re-running the transaction with "SET LOCAL citus.enable_local_execution TO OFF;"
COMMIT;
-- cleanup at exit
RESET log_min_messages;
RESET client_min_messages;
RESET citus.shard_replication_factor;
RESET citus.log_remote_commands;
RESET citus.log_local_commands;
RESET citus.shard_count;
SET search_path TO public;
DROP SCHEMA local_commands_test_schema CASCADE;
NOTICE:  drop cascades to 16 other objects
DETAIL:  drop cascades to table local_commands_test_schema.ref_table
drop cascades to table local_commands_test_schema.ref_table_1250050
drop cascades to table local_commands_test_schema.dist_table
drop cascades to table local_commands_test_schema.dist_table_1250115
drop cascades to table local_commands_test_schema.dist_table_1250118
drop cascades to table local_commands_test_schema.dist_table_1250121
drop cascades to table local_commands_test_schema.dist_table_1250124
drop cascades to table local_commands_test_schema.dist_table_1250127
drop cascades to table local_commands_test_schema.dist_table_1250130
drop cascades to table local_commands_test_schema.dist_table_1250133
drop cascades to table local_commands_test_schema.dist_table_1250136
drop cascades to table local_commands_test_schema.dist_table_1250139
drop cascades to table local_commands_test_schema.dist_table_1250142
drop cascades to table local_commands_test_schema.dist_table_1250145
drop cascades to table local_commands_test_schema.ref_table_1
drop cascades to table local_commands_test_schema.ref_table_1_1250147
DROP SCHEMA foo_schema;
SELECT master_remove_node('localhost', :master_port);
 master_remove_node
---------------------------------------------------------------------

(1 row)

